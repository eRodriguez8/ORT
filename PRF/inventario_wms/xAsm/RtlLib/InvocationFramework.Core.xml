<?xml version="1.0"?>
<doc>
    <assembly>
        <name>InvocationFramework.Core</name>
    </assembly>
    <members>
        <member name="T:InvocationFramework.Core.ServiceCaller">
            <summary>
            Esta clase permite ejecutar servicios mediante los adapters configurados (<seealso cref="T:InvocationFramework.Common.Interfaces.IServiceAdapter"/>)
            </summary>
            <remarks>
            Esta clase es un fachada a todo la infraestructura de Invocation Framework para ser utilizada por los clientes.
            Una descripcion del patron Facade se encuentra en http://www.dofactory.com/Patterns/PatternFacade.aspx
            </remarks>
            <author>Rodolfo Finochietti 02/11/2005 10.00</author>
        </member>
        <member name="F:InvocationFramework.Core.ServiceCaller._instance">
            <summary>
            Singleton para manejar una sola instancia del broker
            </summary>
        </member>
        <member name="F:InvocationFramework.Core.ServiceCaller._context">
            <summary>
            Variable privada para el manejo de la propiedad
            </summary>
        </member>
        <member name="M:InvocationFramework.Core.ServiceCaller.#cctor">
            <summary>
            Construtor
            </summary>
        </member>
        <member name="M:InvocationFramework.Core.ServiceCaller.Execute(System.String,System.String)">
            <summary>
            Ejecuta la operacion que se encuentra en un determinado servicio utilizando alguno de los adapters configurados (<seealso cref="T:InvocationFramework.Common.Interfaces.IServiceAdapter"/>) 
            </summary>
            <param name="serviceName">Nombre del servicio a ejecutar</param>
            <param name="operationName">Nombre de la operacion a ejecutar</param>
            <returns>Respuesta del servicio</returns>
        </member>
        <member name="M:InvocationFramework.Core.ServiceCaller.Execute(System.String,System.String,System.Object[])">
            <summary>
            Ejecuta la operacion que se encuentra en un determinado servicio utilizando alguno de los adapters configurados (<seealso cref="T:InvocationFramework.Common.Interfaces.IServiceAdapter"/>) 
            </summary>
            <param name="serviceName">Nombre del servicio a ejecutar</param>
            <param name="operationName">Nombre de la operacion a ejecutar</param>
            <param name="parameters">Parametros de la operacion</param>
            <returns>Respuesta del servicio</returns>
        </member>
        <member name="M:InvocationFramework.Core.ServiceCaller.AsyncExecute(System.EventHandler{InvocationFramework.Core.AsyncExecutionCompletedEventArgs},System.String,System.String)">
            <summary>
            Ejecuta asincronicamente la operacion que se encuentra en un determinado servicio utilizando alguno de los adapters configurados (<seealso cref="T:InvocationFramework.Common.Interfaces.IServiceAdapter"/>) 
            </summary>
            <param name="executionCompletedEvent">Delegate que se utilizara para notificar el resultdo de la ejecucion del servicio</param>
            <param name="serviceName">Nombre del servicio a ejecutar</param>
            <param name="operationName">Nombre de la operacion a ejecutar</param>
        </member>
        <member name="M:InvocationFramework.Core.ServiceCaller.AsyncExecute(System.EventHandler{InvocationFramework.Core.AsyncExecutionCompletedEventArgs},System.String,System.String,System.Object[])">
            <summary>
            Ejecuta asincronicamente la operacion que se encuentra en un determinado servicio utilizando alguno de los adapters configurados (<seealso cref="T:InvocationFramework.Common.Interfaces.IServiceAdapter"/>) 
            </summary>
            <param name="executionCompletedEvent">Delegate que se utilizara para notificar el resultdo de la ejecucion del servicio</param>
            <param name="serviceName">Nombre del servicio a ejecutar</param>
            <param name="operationName">Nombre de la operacion a ejecutar</param>
            <param name="parameters">Parametros de la operacion</param>
        </member>
        <member name="M:InvocationFramework.Core.ServiceCaller.FixAdapterExecute(System.String,System.String,System.String)">
            <summary>
            Ejecuta la operacion que se encuentra en un determinado servicio utilizando el adaptador cuyo id se pasa por parametro
            </summary>
            <param name="adapterId">Identificador del adaptador que se quiere utilizar para ejecutar la operacion</param>
            <param name="serviceName">Nombre del servicio a ejecutar</param>
            <param name="operationName">Nombre de la operacion a ejecutar</param>
            <returns>Respuesta del servicio</returns>
        </member>
        <member name="M:InvocationFramework.Core.ServiceCaller.FixAdapterExecute(System.String,System.String,System.String,System.Object[])">
            <summary>
            Ejecuta la operacion que se encuentra en un determinado servicio utilizando el adaptador cuyo id se pasa por parametro
            </summary>
            <param name="adapterId">Identificador del adaptador que se quiere utilizar para ejecutar la operacion</param>
            <param name="serviceName">Nombre del servicio a ejecutar</param>
            <param name="operationName">Nombre de la operacion a ejecutar</param>
            <param name="parameters">Parametros de la operacion</param>
            <returns>Respuesta del servicio</returns>
        </member>
        <member name="M:InvocationFramework.Core.ServiceCaller.AsyncFixAdapterExecute(System.EventHandler{InvocationFramework.Core.AsyncExecutionCompletedEventArgs},System.String,System.String,System.String)">
            <summary>
            Ejecuta asincronicamente la operacion que se encuentra en un determinado servicio el adaptador cuyo id se pasa por parametro
            </summary>
            <param name="executionCompletedEvent">Delegate que se utilizara para notificar el resultdo de la ejecucion del servicio</param>
            <param name="adapterId">Identificador del adaptador que se quiere utilizar para ejecutar la operacion</param>
            <param name="serviceName">Nombre del servicio a ejecutar</param>
            <param name="operationName">Nombre de la operacion a ejecutar</param>
        </member>
        <member name="M:InvocationFramework.Core.ServiceCaller.AsyncFixAdapterExecute(System.EventHandler{InvocationFramework.Core.AsyncExecutionCompletedEventArgs},System.String,System.String,System.String,System.Object[])">
            <summary>
            Ejecuta asincronicamente la operacion que se encuentra en un determinado servicio el adaptador cuyo id se pasa por parametro
            </summary>
            <param name="executionCompletedEvent">Delegate que se utilizara para notificar el resultdo de la ejecucion del servicio</param>
            <param name="adapterId">Identificador del adaptador que se quiere utilizar para ejecutar la operacion</param>
            <param name="serviceName">Nombre del servicio a ejecutar</param>
            <param name="operationName">Nombre de la operacion a ejecutar</param>
            <param name="parameters">Parametros de la operacion</param>
        </member>
        <member name="M:InvocationFramework.Core.ServiceCaller.AsyncExecution(System.Object)">
            <summary>
            Metodo usado por <seealso cref="T:System.Threading.ThreadPool"/> para ejecutar servicios asincronicamente
            </summary>
            <param name="stateInfo"></param>
        </member>
        <member name="P:InvocationFramework.Core.ServiceCaller.IsLocalCatalogEnabled">
            <summary>
            Configuration setting: local catalog enabled
            </summary>
        </member>
        <member name="P:InvocationFramework.Core.ServiceCaller.Context">
            <summary>
            Contexto donde las aplicaciones pueden guadar informacion fuera de banda para que las aplicaciones la transmitan
            </summary>
        </member>
        <member name="T:InvocationFramework.Core.Configuration.ConfigurationHelper">
            <summary>
            Helper para acceder a la configuracion
            </summary>
        </member>
        <member name="F:InvocationFramework.Core.Configuration.ConfigurationHelper._config">
            <summary>
            Variable que contiene la configuracion
            </summary>
        </member>
        <member name="M:InvocationFramework.Core.Configuration.ConfigurationHelper.#ctor">
            <summary>
            Constructor por defecto
            </summary>
        </member>
        <member name="P:InvocationFramework.Core.Configuration.ConfigurationHelper.EnablePerformanceCounters">
            <summary>
            Indica si publican o no los performance counters
            </summary>
            <remarks>
            Si se omite en la configuracion el catalogo local esta activado 
            </remarks>
        </member>
        <member name="P:InvocationFramework.Core.Configuration.ConfigurationHelper.EnableLocalCatalog">
            <summary>
            Indica si se mantiene o no un catalogo local de servicios
            </summary>
            <remarks>
            Si se omite en la configuracion el catalogo local esta activado 
            </remarks>
        </member>
        <member name="P:InvocationFramework.Core.Configuration.ConfigurationHelper.LocalCatalogInvalidationInterval">
            <summary>
            Intervalo, en minutos, en los que se invalida el catalogo local de servicios
            </summary>
            <remarks>
            Si se omite en la configuracion o el valor es cero o menor no se invalida el catalogo
            </remarks>
        </member>
        <member name="P:InvocationFramework.Core.Configuration.ConfigurationHelper.PublisherPolicy">
            <summary>
            Indica cual es la policy WSE 3 utilizada por lo service publishers
            </summary>
            <remarks>
            Si se omite en la configuracion no se utilizan policies
            </remarks>
        </member>
        <member name="P:InvocationFramework.Core.Configuration.ConfigurationHelper.CallerAdapters">
            <summary>
            Coleccion con los adaptadores configurados para el cliente
            </summary>
        </member>
        <member name="P:InvocationFramework.Core.Configuration.ConfigurationHelper.PublisherAdapters">
            <summary>
            Coleccion con los adaptadores configurados para el publicador
            </summary>
        </member>
        <member name="P:InvocationFramework.Core.Configuration.ConfigurationHelper.ServicePublishers">
            <summary>
            Coleccion con los service Publishers
            </summary>
        </member>
        <member name="T:InvocationFramework.Core.Configuration.AdapterElement">
            <summary>
            Representa la configuracion de un adaptador
            </summary>
        </member>
        <member name="F:InvocationFramework.Core.Configuration.AdapterElement._id">
            <summary>
            Variable privada para el manejo de la propiedad
            </summary>
        </member>
        <member name="F:InvocationFramework.Core.Configuration.AdapterElement._order">
            <summary>
            Variable privada para el manejo de la propiedad
            </summary>
        </member>
        <member name="F:InvocationFramework.Core.Configuration.AdapterElement._enabled">
            <summary>
            Variable privada para el manejo de la propiedad
            </summary>
        </member>
        <member name="F:InvocationFramework.Core.Configuration.AdapterElement._defaultOperation">
            <summary>
            Variable privada para el manejo de la propiedad
            </summary>
        </member>
        <member name="F:InvocationFramework.Core.Configuration.AdapterElement._type">
            <summary>
            Variable privada para el manejo de la propiedad
            </summary>
        </member>
        <member name="F:InvocationFramework.Core.Configuration.AdapterElement._adapterConfiguration">
            <summary>
            Variable privada para el manejo de la propiedad
            </summary>
        </member>
        <member name="P:InvocationFramework.Core.Configuration.AdapterElement.Id">
            <summary>
            Identificador del adaptador
            </summary>
        </member>
        <member name="P:InvocationFramework.Core.Configuration.AdapterElement.Order">
            <summary>
            Orden de utilizacion del adaptador
            </summary>
        </member>
        <member name="P:InvocationFramework.Core.Configuration.AdapterElement.Enabled">
            <summary>
            Indica si el adaptador esta habilitado o no
            </summary>
        </member>
        <member name="P:InvocationFramework.Core.Configuration.AdapterElement.DefaultOperation">
            <summary>
            Servicio por defecto en el adaptador
            </summary>
        </member>
        <member name="P:InvocationFramework.Core.Configuration.AdapterElement.Type">
            <summary>
            Tipo .Net donde esta implementado el adaptador
            </summary>
        </member>
        <member name="P:InvocationFramework.Core.Configuration.AdapterElement.AdapterConfiguration">
            <summary>
            configuracion del adaptador
            </summary>
        </member>
        <member name="T:InvocationFramework.Core.AsyncExecutionResult">
            <summary>
            Indica el resultado de una ejecucion de servicios asincronica
            </summary>
        </member>
        <member name="F:InvocationFramework.Core.AsyncExecutionResult.Ok">
            <summary>
            La ejecucion fue correcta
            </summary>
        </member>
        <member name="F:InvocationFramework.Core.AsyncExecutionResult.Failed">
            <summary>
            La ejecucion fue incorrecta
            </summary>
        </member>
        <member name="T:InvocationFramework.Core.Configuration.SectionHandler">
            <summary>
            Clase que procesa la seccion de configuracion del framework
            </summary>
        </member>
        <member name="M:InvocationFramework.Core.Configuration.SectionHandler.Create(System.Object,System.Object,System.Xml.XmlNode)">
            <summary>
            </summary>
            <param name="parent"></param>
            <param name="configContext"></param>
            <param name="section"></param>
            <returns></returns>
        </member>
        <member name="T:InvocationFramework.Core.Configuration.ServicePublisherElement">
            <summary>
            Representa la configuracion de un service publisher
            </summary>
        </member>
        <member name="F:InvocationFramework.Core.Configuration.ServicePublisherElement._type">
            <summary>
            Variable privada para el manejo de la propiedad
            </summary>
        </member>
        <member name="F:InvocationFramework.Core.Configuration.ServicePublisherElement._policy">
            <summary>
            Variable privada para el manejo de la propiedad
            </summary>
        </member>
        <member name="F:InvocationFramework.Core.Configuration.ServicePublisherElement._serviceNameFilterRegExp">
            <summary>
            Variable privada para el manejo de la propiedad
            </summary>
        </member>
        <member name="P:InvocationFramework.Core.Configuration.ServicePublisherElement.Type">
            <summary>
            Full type name del service publisher
            </summary>
        </member>
        <member name="P:InvocationFramework.Core.Configuration.ServicePublisherElement.Policy">
            <summary>
            Policy opcional para este servicePublisher, si se omite toma el default global
            </summary>
        </member>
        <member name="P:InvocationFramework.Core.Configuration.ServicePublisherElement.ServiceNameFilterRegExp">
            <summary>
            Regular Expression (opcional) para filtrar los ServiceName que publica
            </summary>
        </member>
        <member name="T:InvocationFramework.Core.ServiceBroker">
            <summary>
            Esta clase actua como Virtual Proxy (http://www.dofactory.com/Patterns/PatternProxy.aspx) sobre los adapters
            para implementar centralizadamente la logica de busqueda del adapter que atiende un determiando servicio en particular
            </summary>
            <author>Rodolfo Finochietti 24/08/2005 9.43</author>
        </member>
        <member name="F:InvocationFramework.Core.ServiceBroker._adapterCache">
            <summary>
            Cache de adaptadores
            </summary>
        </member>
        <member name="F:InvocationFramework.Core.ServiceBroker._id">
            <summary>
            Variable privada para el manejo de la propiedad
            </summary>
        </member>
        <member name="F:InvocationFramework.Core.ServiceBroker._initialized">
            <summary>
            Variable privada para el manejo de la propiedad
            </summary>
        </member>
        <member name="F:InvocationFramework.Core.ServiceBroker._defaultOperation">
            <summary>
            Variable privada para el manejo de la propiedad
            </summary>
        </member>
        <member name="M:InvocationFramework.Core.ServiceBroker.Init(System.String,System.String,System.Xml.XmlNode)">
            <summary>
            Inicializa el adaptador
            </summary>
            <param name="id">Identificador del adaptador</param>
            <param name="defaultOperation">Nombre de la operacion por defecto</param>
            <param name="configuration">Configuracion del adaptador</param>
        </member>
        <member name="M:InvocationFramework.Core.ServiceBroker.IsServiceAvailable(System.String)">
            <summary>
            Permite saber si un servicio esta disponible para ser ejecutado mediante este adaptador
            </summary>
            <param name="serviceName">Nombre del servicio</param>
            <returns>True este adaptador puede ejecutar este servicio, False de lo contrario</returns>
        </member>
        <member name="M:InvocationFramework.Core.ServiceBroker.IsServiceOperationAvailable(System.String,System.String)">
            <summary>
            Verifica si existe una operacion en un servicio
            </summary>
            <param name="serviceName">Nombre del servicio</param>
            <param name="operationName">Nombre de la operacion</param>
            <returns>True si la operacion existe en el servicio, de lo contrario False</returns>
        </member>
        <member name="M:InvocationFramework.Core.ServiceBroker.GetMostRequestedServices">
            <summary>
            Devuelve una lista con los nombres de los servicios mas utilizados
            </summary>
            <returns>Una lista con los nombres de los servicios mas utilizados</returns>
        </member>
        <member name="M:InvocationFramework.Core.ServiceBroker.Execute(System.String,System.String,InvocationFramework.Common.ContextDictionary,System.Object[])">
            <summary>
            Ejecuta la operacion que se encuentra en un determinado servicio
            </summary>
            <param name="serviceName">Nombre del servicio</param>
            <param name="operationName">Nombre de la operacion a ejecutar</param>
            <param name="context">El contexto que se desea propagar junto con al ejecucion del servicios</param>
            <param name="parameters">Parametros de la operacion</param>
            <returns>Resultado de la ejecucion de la operacion</returns>
        </member>
        <member name="M:InvocationFramework.Core.ServiceBroker.FixAdapterExecute(System.String,System.String,System.String,InvocationFramework.Common.ContextDictionary,System.Object[])">
            <summary>
            Ejecuta la operacion que se encuentra en un determinado servicio utilizando el adaptador cuyo id se pasa por parametro
            </summary>
            <param name="adapterId">Identificador del adaptador que se quiere utilizar para ejecutar la operacion</param>
            <param name="serviceName">Nombre del servicio</param>
            <param name="operationName">Nombre de la operacion a ejecutar</param>
            <param name="context">El contexto que se desea propagar junto con al ejecucion del servicios</param>
            <param name="parameters">Parametros de la operacion</param>
            <returns>Resultado de la ejecucion de la operacion</returns>
        </member>
        <member name="P:InvocationFramework.Core.ServiceBroker.IsLocalCatalogEnabled">
            <summary>
            Configuration setting: local catalog enabled
            </summary>
        </member>
        <member name="P:InvocationFramework.Core.ServiceBroker.Id">
            <summary>
            Identificador del adaptador
            </summary>
        </member>
        <member name="P:InvocationFramework.Core.ServiceBroker.Initialized">
            <summary>
            Indica si el adaptador esta inicializado o no
            </summary>
        </member>
        <member name="P:InvocationFramework.Core.ServiceBroker.DefaultOperation">
            <summary>
            Nombre de la operacion por defecto
            </summary>
        </member>
        <member name="T:InvocationFramework.Core.ServicePublisher">
            <summary>
            Esta clase permite ejecutar servicios mediante los adapters configurados (<seealso cref="T:InvocationFramework.Common.Interfaces.IServiceAdapter"/>)
            </summary>
            <remarks>
            Esta clase es un fachada a todo la infraestructura de Invocation Framework que se utiliza cuando se quiere programar un publicador.
            Una descripcion del patron Facade se encuentra en http://www.dofactory.com/Patterns/PatternFacade.aspx
            </remarks>
            <author>Rodolfo Finochietti 29/11/2005 13.00</author>
        </member>
        <member name="F:InvocationFramework.Core.ServicePublisher._instance">
            <summary>
            Singleton para manejar una sola instancia del broker
            </summary>
        </member>
        <member name="M:InvocationFramework.Core.ServicePublisher.#cctor">
            <summary>
            Construtor
            </summary>
        </member>
        <member name="M:InvocationFramework.Core.ServicePublisher.IsServiceAvailable(System.String)">
            <summary>
            Permite saber si un servicio esta disponible para ser ejecutado mediante este adaptador
            </summary>
            <param name="serviceName">Nombre del servicio</param>
            <returns>True este adaptador puede ejecutar este servicio, False de lo contrario</returns>
        </member>
        <member name="M:InvocationFramework.Core.ServicePublisher.IsServiceOperationAvailable(System.String,System.String)">
            <summary>
            Verifica si existe una operacion en un servicio
            </summary>
            <param name="serviceName">Nombre del servicio</param>
            <param name="operationName">Nombre de la operacion</param>
            <returns>True si la operacion existe en el servicio, de lo contrario False</returns>
        </member>
        <member name="M:InvocationFramework.Core.ServicePublisher.GetMostRequestedServices">
            <summary>
            Devuelve una lista con los nombres de los servicios mas utilizados
            </summary>
            <returns>Una lista con los nombres de los servicios mas utilizados</returns>
        </member>
        <member name="M:InvocationFramework.Core.ServicePublisher.Execute(System.String,System.String,InvocationFramework.Common.ContextDictionary,System.Object[])">
            <summary>
            Ejecuta la operacion que se encuentra en un determinado servicio
            </summary>
            <param name="serviceName">Nombre del servicio</param>
            <param name="operationName">Nombre de la operacion a ejecutar</param>
            <param name="context">El contexto que se desea propagar junto con al ejecucion del servicios</param>
            <param name="parameters">Parametros de la operacion</param>
            <returns>Resultado de la ejecucion de la operacion</returns>
        </member>
        <member name="T:InvocationFramework.Core.AsyncExecutionCompletedEventArgs">
            <summary>
            Argumentos del evento que se produce cuando se completa la ejecucion asincronica de un servicio
            </summary>
            <author>Rodolfo Finochietti 30/11/2005 15.41</author>
        </member>
        <member name="M:InvocationFramework.Core.AsyncExecutionCompletedEventArgs.#ctor(InvocationFramework.Common.InvocationInformation,InvocationFramework.Core.AsyncExecutionResult)">
            <summary>
            Constructor
            </summary>
            <param name="executionInformation">Informacion de la invocacion de un servicio</param>
            <param name="executionResult">El resultado de la ejecucion</param>
        </member>
        <member name="F:InvocationFramework.Core.AsyncExecutionCompletedEventArgs._executionInformation">
            <summary>
            Variable privada para el manejo de la propiedad
            </summary>
        </member>
        <member name="F:InvocationFramework.Core.AsyncExecutionCompletedEventArgs._executionResult">
            <summary>
            Variable privada para el manejo de la propiedad
            </summary>
        </member>
        <member name="P:InvocationFramework.Core.AsyncExecutionCompletedEventArgs.ExecutionInformation">
            <summary>
            Informacion de la invocacion de un servicio
            </summary>
        </member>
        <member name="P:InvocationFramework.Core.AsyncExecutionCompletedEventArgs.ExecutionResult">
            <summary>
            El resultado de la ejecucion
            </summary>
        </member>
        <member name="T:InvocationFramework.Core.Configuration.ConfigurationInformation">
            <summary>
            Guarda la informacion de la configuracion del Invocation Framework
            </summary>
        </member>
        <member name="M:InvocationFramework.Core.Configuration.ConfigurationInformation.#ctor(System.Boolean,System.Boolean,System.Double,System.String,System.Collections.Generic.List{InvocationFramework.Core.Configuration.AdapterElement},System.Collections.Generic.List{InvocationFramework.Core.Configuration.AdapterElement},System.Collections.Generic.List{InvocationFramework.Core.Configuration.ServicePublisherElement})">
            <summary>
            Constructor
            </summary>
            <param name="enablePerformanceCounters">Indica si publican o no los performance counters</param>
            <param name="enableLocalCatalog">Indica si se activa o no un catalogo local de servicios</param>
            <param name="localCatalogInvalidationInterval">Intervalo, en minutos, en los que se invalida el catalogo local de servicios</param>
            <param name="publisherPolicy">Indica cual es la policy WSE 3 utilizada por lo service publishers</param>
            <param name="callerAdapters">Coleccion con los adaptadores configurados para el cliente</param>
            <param name="publisherAdapters">Coleccion con los adaptadores configurados para el publicador</param>
            <param name="servicePublishers">Coleccion con los adaptadores configurados para el publicador</param>
        </member>
        <member name="F:InvocationFramework.Core.Configuration.ConfigurationInformation._enablePerformanceCounters">
            <summary>
            Variable privada para el manejo de la propiedad
            </summary>
        </member>
        <member name="F:InvocationFramework.Core.Configuration.ConfigurationInformation._enableLocalCatalog">
            <summary>
            Variable privada para el manejo de la propiedad
            </summary>
        </member>
        <member name="F:InvocationFramework.Core.Configuration.ConfigurationInformation._localCatalogInvalidationInterval">
            <summary>
            Variable privada para el manejo de la propiedad
            </summary>
        </member>
        <member name="F:InvocationFramework.Core.Configuration.ConfigurationInformation._publisherPolicy">
            <summary>
            Variable privada para el manejo de la propiedad
            </summary>
        </member>
        <member name="F:InvocationFramework.Core.Configuration.ConfigurationInformation._callerAdapters">
            <summary>
            Variable privada para el manejo de la propiedad
            </summary>
        </member>
        <member name="F:InvocationFramework.Core.Configuration.ConfigurationInformation._publisherAdapters">
            <summary>
            Variable privada para el manejo de la propiedad
            </summary>
        </member>
        <member name="F:InvocationFramework.Core.Configuration.ConfigurationInformation._servicePublishers">
            <summary>
            Variable privada para el manejo de la propiedad
            </summary>
        </member>
        <member name="P:InvocationFramework.Core.Configuration.ConfigurationInformation.EnablePerformanceCounters">
            <summary>
            Indica si publican o no los performance counters
            </summary>
            <remarks>
            Si se omite en la configuracion el catalogo local esta activado 
            </remarks>
        </member>
        <member name="P:InvocationFramework.Core.Configuration.ConfigurationInformation.EnableLocalCatalog">
            <summary>
            Indica si se mantiene o no un catalogo local de servicios
            </summary>
            <remarks>
            Si se omite en la configuracion el catalogo local esta activado 
            </remarks>
        </member>
        <member name="P:InvocationFramework.Core.Configuration.ConfigurationInformation.LocalCatalogInvalidationInterval">
            <summary>
            Intervalo, en minutos, en los que se invalida el catalogo local de servicios
            </summary>
            <remarks>
            Si se omite en la configuracion o el valor es cero o menor no se invalida el catalogo
            </remarks>
        </member>
        <member name="P:InvocationFramework.Core.Configuration.ConfigurationInformation.PublisherPolicy">
            <summary>
            Indica cual es la policy WSE 3 utilizada por lo service publishers
            </summary>
            <remarks>
            Si se omite en la configuracion no se utilizan policies
            </remarks>
        </member>
        <member name="P:InvocationFramework.Core.Configuration.ConfigurationInformation.CallerAdapters">
            <summary>
            Coleccion con los adaptadores configurados para el cliente
            </summary>
        </member>
        <member name="P:InvocationFramework.Core.Configuration.ConfigurationInformation.PublisherAdapters">
            <summary>
            Coleccion con los adaptadores configurados para el publicador
            </summary>
        </member>
        <member name="P:InvocationFramework.Core.Configuration.ConfigurationInformation.ServicePublishers">
            <summary>
            Coleccion con los adaptadores configurados para el publicador
            </summary>
        </member>
        <member name="T:InvocationFramework.Core.AdapterCache">
            <summary>
            Esta clase implementa un cache de adaptadores y sus catalogos
            </summary>
            <author>Rodolfo Finochietti 03/11/2005 10.23</author>
        </member>
        <member name="F:InvocationFramework.Core.AdapterCache._enableLocalCatalog">
            <summary>
            Indica si se activa o no un catalogo local de servicios
            </summary>
        </member>
        <member name="F:InvocationFramework.Core.AdapterCache._adaptersByOrder">
            <summary>
            Esta coleccion para ordenar los adaptadores por estos se deben recorrer en el orden en que estan configurados
            </summary>
        </member>
        <member name="F:InvocationFramework.Core.AdapterCache._adaptersByOrderDesc">
            <summary>
            Esta coleccion para ordenar los adaptadores por estos se deben recorrer cuando se cargar los servicios mas frecuentemente usados
            en este caso el orden de recorrida es al revez
            </summary>
        </member>
        <member name="F:InvocationFramework.Core.AdapterCache._adapters">
            <summary>
            Coleccion para guardar los adaptadores
            </summary>
        </member>
        <member name="F:InvocationFramework.Core.AdapterCache._servicesCatalog">
            <summary>
            Catalog de servicios, la key es el nombre del servicio y el value es el id del adaptador que ejecuta ese servicio
            </summary>
        </member>
        <member name="F:InvocationFramework.Core.AdapterCache._operationsCatalog">
            <summary>
            Catalog de operaciones, la key es el nombre del servicio concatenada con el nombre de la operacion y el value es el id del adaptador que ejecuta ese servicio
            </summary>
        </member>
        <member name="F:InvocationFramework.Core.AdapterCache._invalidationCatalogTimer">
            <summary>
            Esta timer maneja la invalidacion de los catalogos
            </summary>
        </member>
        <member name="F:InvocationFramework.Core.AdapterCache.syncAdapters">
            <summary>
            Objeto utilizado para la sincronizacion de la coleccion de adaptadores
            </summary>
        </member>
        <member name="F:InvocationFramework.Core.AdapterCache.syncServicesCatalog">
            <summary>
            Objeto utilizado para la sincronizacion de la coleccion que contiene el catalogo de servicios
            </summary>
        </member>
        <member name="F:InvocationFramework.Core.AdapterCache.syncOperationsCatalog">
            <summary>
            Objeto utilizado para la sincronizacion de la coleccion que contiene el catalogo de operaciones
            </summary>
        </member>
        <member name="M:InvocationFramework.Core.AdapterCache.#ctor(System.Boolean,System.Double)">
            <summary>
            Constructor por defecto
            </summary>
            <param name="enableLocalCatalog">Indica si se activa o no un catalogo local de servicios</param>
            <param name="localCatalogInvalidationInterval">Intervalo, en minutos, en los que se invalida el cache</param>
        </member>
        <member name="M:InvocationFramework.Core.AdapterCache._invalidationCatalogTimer_Elapsed(System.Object,System.Timers.ElapsedEventArgs)">
            <summary>
            Este evento se dispara para invalidar el catalogo local 
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:InvocationFramework.Core.AdapterCache.UpdateCatalogWithMostRequestedServices">
            <summary>
            Actualiza el catalogo con los servicios mas utilizados de todos los adaptadores
            </summary>
        </member>
        <member name="M:InvocationFramework.Core.AdapterCache.AddAdapter(InvocationFramework.Common.Interfaces.IServiceAdapter,System.Int32)">
            <summary>
            Agrega un adaptador al cache
            </summary>
            <param name="adapter">Adaptador que se quiere agregar al cache</param>
            <param name="order">Orden del adaptador</param>
        </member>
        <member name="M:InvocationFramework.Core.AdapterCache.GetAdapter(System.String)">
            <summary>
            Obtiene un adaptador del cache
            </summary>
            <param name="adapterId">Identificador del adaptador que se quiere obtener</param>
            <returns>El adaptador pedido o null su no existe un adaptador con es identificador en el cache</returns>
        </member>
        <member name="M:InvocationFramework.Core.AdapterCache.GetAdapterByService(System.String)">
            <summary>
            Devuelve el adaptador que ejecuta el servicio cuyo nombre se pasa por parametro
            </summary>
            <param name="serviceName">Nombre del servicio</param>
            <returns>El identificador del adaptador que ejecuta el servicio o null si ningun adaptador ejecuta ese servicio</returns>
        </member>
        <member name="M:InvocationFramework.Core.AdapterCache.GetAdapterByServiceOperation(System.String,System.String)">
            <summary>
            Devuelve el adaptador que ejecuta la operacion del servicio cuyo nombre se pasa por parametros
            </summary>
            <param name="serviceName">Nombre del servicio</param>
            <param name="operationService">Nombre de la operacion</param>
            <returns>El identificador del adaptador que ejecuta la operacion o null si ningun adaptador ejecuta ese servicio</returns>
        </member>
        <member name="M:InvocationFramework.Core.AdapterCache.GetCatalog">
            <summary>
            Devuleve el catalo local
            </summary>
            <returns>Catalogo local</returns>
        </member>
        <member name="M:InvocationFramework.Core.AdapterCache.SearchServiceByAdapters(System.String)">
            <summary>
            Busca un servicio utilizando los adaptadores que se encuentran en cache
            </summary>
            <param name="serviceName">Nombre del servicio a buscar</param>
            <returns>Identificador del adaptador si se encontro alguno que ejecute el servicio o null de lo contrario</returns>
        </member>
        <member name="M:InvocationFramework.Core.AdapterCache.SearchOperationServiceByAdapters(System.String,System.String)">
            <summary>
            Busca una operacion utilizando los adaptadores que se encuentran en cache
            </summary>
            <param name="serviceName">Nombre del servicio a buscar</param>
            <param name="operationName">Nombre de la operacion</param>
            <returns>Identificador del adaptador si se encontro alguno que ejecute la operacion o null de lo contrario</returns>
        </member>
        <member name="M:InvocationFramework.Core.AdapterCache.UpdateServicesCatalog(System.String,System.String[])">
            <summary>
            Actualiza el catalogo local de servicios
            </summary>
            <param name="adapterId">Identificador del adaptador que ejecuta los servicios pasado en el siguiente parametro</param>
            <param name="services">Servicios a agregar al catalogo</param>
        </member>
        <member name="M:InvocationFramework.Core.AdapterCache.UpdateServicesOperationCatalog(System.String,System.String,System.String)">
            <summary>
            Actualiza el catalogo local de operaciones
            </summary>
            <param name="adapterId">Identificador del adaptador que ejecuta los servicios pasado en el siguiente parametro</param>
            <param name="serviceName">Nombre del servicio</param>
            <param name="operationName">Nombre de la operacion</param>
        </member>
        <member name="M:InvocationFramework.Core.AdapterCache.GetOperationCatalogKey(System.String,System.String)">
            <summary>
            Devuelve la calve para buscar en el catalogo de operaciones
            </summary>
            <param name="serviceName">Nombre del servicio</param>
            <param name="operationName">Nombre de la operacion</param>
            <returns>La clave formateada</returns>
        </member>
        <member name="T:InvocationFramework.Core.AsyncExecutionThreadPoolQueueItem">
            <summary>
            Esta clase se utiliza internamente para pasar los parametros en una ejecucion asincronica
            </summary>
            <author>Rodolfo Finochietti 30/11/2005 11.52</author>
        </member>
        <member name="M:InvocationFramework.Core.AsyncExecutionThreadPoolQueueItem.#ctor(System.EventHandler{InvocationFramework.Core.AsyncExecutionCompletedEventArgs},System.Object,InvocationFramework.Common.InvocationInformation)">
            <summary>
            Constructor
            </summary>
            <param name="executionCompletedEvent">Evento a despachar</param>
            <param name="sender">Sender del evento</param>
            <param name="executionInformation">Informacion de la invocacion del servicio</param>
        </member>
        <member name="F:InvocationFramework.Core.AsyncExecutionThreadPoolQueueItem._executionCompletedEvent">
            <summary>
            Variable privada para el manejo de la propiedad
            </summary>
        </member>
        <member name="F:InvocationFramework.Core.AsyncExecutionThreadPoolQueueItem._sender">
            <summary>
            Variable privada para el manejo de la propiedad
            </summary>
        </member>
        <member name="F:InvocationFramework.Core.AsyncExecutionThreadPoolQueueItem._executionInformation">
            <summary>
            Variable privada para el manejo de la propiedad
            </summary>
        </member>
        <member name="P:InvocationFramework.Core.AsyncExecutionThreadPoolQueueItem.ExecutionCompletedEvent">
            <summary>
            Evento a despachar
            </summary>
        </member>
        <member name="P:InvocationFramework.Core.AsyncExecutionThreadPoolQueueItem.Sender">
            <summary>
            Sender del evento
            </summary>
        </member>
        <member name="P:InvocationFramework.Core.AsyncExecutionThreadPoolQueueItem.ExecutionInformation">
            <summary>
            Informacion de la invocacion del servicio
            </summary>
        </member>
    </members>
</doc>
