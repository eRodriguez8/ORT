<?xml version="1.0"?>
<doc>
    <assembly>
        <name>FlexCore.Util</name>
    </assembly>
    <members>
        <member name="T:FlexCore.Util.ConfigHelper">
            <summary>
            Esta clase contiene métodos estáticos auxiliares para el acceso a la configuracion
            </summary>
        </member>
        <member name="T:FlexCore.LateBindingWrapper">
             <summary>
             Clase base para facilitar la instanciacion de objetos late binding
             y la invocacion a sus metodos y propiedades
             </summary>
             <example>
             class VfpApp: FlexCore.LateBindingWrapper
             {
                protected VfpApp(Type type, object instance)
                    : base(type, instance) { }
            
                public static VfpApp CreateInstance()
                {
                    Type type = Type.GetTypeFromProgID("VisualFoxpro.Application.9");
                    return new VfpApp(type, Activator.CreateInstance(type));
                }
                public void DoCmd(string command)
                {
                    this.InvokeMethod("DoCmd", command);
                }
                public override void Dispose()
                {
                    if (this.instance != null)
                    {
                        this.InvokeMethod("Quit");
                    }
                    base.Dispose();
                }
             }
             </example>
        </member>
        <member name="F:FlexCore.LateBindingWrapper.type">
            <summary>
            Informacion del tipo, obtenida al instanciar
            </summary>
        </member>
        <member name="F:FlexCore.LateBindingWrapper.instance">
            <summary>
            Instancia del objeto
            </summary>
        </member>
        <member name="M:FlexCore.LateBindingWrapper.#ctor(System.Type,System.Object)">
            <summary>
            Constructor (para clases especializadas)
            </summary>
            <param name="type"></param>
            <param name="instance"></param>
        </member>
        <member name="M:FlexCore.LateBindingWrapper.#ctor(System.Object)">
            <summary>
            Constructor (para clases especializadas)
            </summary>
            <param name="instance"></param>
        </member>
        <member name="M:FlexCore.LateBindingWrapper.CreateInstanceFromProgId(System.String)">
            <summary>
            Factory method
            </summary>
            <param name="progId"></param>
            <returns></returns>
        </member>
        <member name="M:FlexCore.LateBindingWrapper.InvokeMethod(System.String,System.Object[])">
            <summary>
            Realiza la invocación a un método con los parametros especificados
            </summary>
            <param name="name"></param>
            <param name="args"></param>
            <returns></returns>
        </member>
        <member name="M:FlexCore.LateBindingWrapper.CreateLboFromMethod(System.String,System.Object[])">
            <summary>
            Invoca a un metodo que retorna un objeto, e instancia un wrapper (de esta misma clase)
            para el mismo.
            </summary>
            <param name="name"></param>
            <param name="args"></param>
            <returns></returns>
        </member>
        <member name="M:FlexCore.LateBindingWrapper.GetProperty(System.String)">
            <summary>
            Obtiene el valor de una propiedad
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:FlexCore.LateBindingWrapper.GetProperty(System.String,System.Object[])">
            <summary>
            Obtiene el valor de una propiedad
            </summary>
            <param name="name"></param>
            <param name="args"></param>
            <returns></returns>
        </member>
        <member name="M:FlexCore.LateBindingWrapper.SetProperty(System.String,System.Object[])">
            <summary>
            Asigna el valor de una propiedad
            </summary>
            <param name="name"></param>
            <param name="args"></param>
        </member>
        <member name="M:FlexCore.LateBindingWrapper.CreateLboFromProperty(System.String,System.Object[])">
            <summary>
            Obtiene el valor de una propiedad de tipo objeto, e instancia un wrapper (de esta misma clase)
            para el mismo.
            </summary>
            <param name="name"></param>
            <param name="args"></param>
            <returns></returns>
        </member>
        <member name="M:FlexCore.LateBindingWrapper.Dispose">
            <summary>
            Libera los recursos de la instancia
            </summary>
        </member>
        <member name="T:FlexCore.Util.CollectionHelper">
            <summary>
            Clase auxiliar para operaciones sobre colecciones y enumerables
            </summary>
        </member>
        <member name="T:FlexCore.Util.CollectionHelper.ComparadorDinamico">
            <summary>
            Clase auxiliar de uso interno para comparar
            </summary>
        </member>
        <member name="T:FlexCore.Util.DataSetHelper">
            <summary>
            Esta clase contiene metodos auxiliares y de extension para el manejo de DataSets
            </summary>
        </member>
        <member name="M:FlexCore.Util.DataSetHelper.GetXml(System.Data.DataSet,System.Boolean)">
            <summary>
            Obtiene el XML del DataSet especificado corrigiendo el XML de las fechas
            Si se indica el estado de las filas a retornar, filtra el resultado segun el estado indicado
            Si no hay filas retorna null
            NOTA: trabaja sobre una copia, NO modifica el contenido ni propiedades de las columnas
            </summary>
            <param name="ds">Datos a serializar</param>
            <param name="keepDataSetName">Si true mantiene el nombre del DS como raiz del XML, en caso contrario lo reemplaza por "DataSet"</param>
        </member>
        <member name="M:FlexCore.Util.DataSetHelper.GetXml(System.Data.DataSet,System.Boolean,System.String)">
            <summary>
            Obtiene el XML del DataSet especificado corrigiendo el XML de las fechas
            Si se indica el estado de las filas a retornar, filtra el resultado segun el estado indicado
            Si no hay filas retorna null
            NOTA: trabaja sobre una copia, NO modifica el contenido ni propiedades de las columnas
            </summary>
            <param name="ds">Datos a serializar</param>
            <param name="keepDataSetName">Si true mantiene el nombre del DS como raiz del XML, en caso contrario lo reemplaza por "DataSet"</param>
            <param name="tableNames">Tablas a incluir en el XML (lista separada por comas) o "*" para todas</param>
        </member>
        <member name="M:FlexCore.Util.DataSetHelper.GetXml(System.Data.DataSet,System.Boolean,System.String,System.Data.DataViewRowState)">
            <summary>
            Obtiene el XML del DataSet especificado corrigiendo el XML de las fechas
            Filtra el resultado segun el estado indicado de las filas
            Si no hay filas retorna null
            NOTA: trabaja sobre una copia, NO modifica el contenido ni propiedades de las columnas
            </summary>
            <param name="ds">Datos a serializar</param>
            <param name="keepDataSetName">Si true mantiene el nombre del DS como raiz del XML, en caso contrario lo reemplaza por "DataSet"</param>
            <param name="tableNames">Tablas a incluir en el XML (lista separada por comas) o "*" para todas</param>
            <param name="state">Estado de las filas a incluir en el XML</param>
        </member>
        <member name="M:FlexCore.Util.DataSetHelper.FixDateColumns(System.Data.DataSet)">
            <summary>
            Reemplaza el DateTimeMode de las columnas tipo fecha a Unspecified, para su correcta serialización
            </summary>
            <param name="ds">Datos a serializar</param>
        </member>
        <member name="M:FlexCore.Util.DataSetHelper.DeleteAllRows(System.Data.DataTable)">
            <summary>
            Elimina todas las filas de una tabla, 
            invocando a <see cref="M:System.Data.DataRow.Delete"/> en cada una de ellas
            (no remueve las filas como el método Clear)
            </summary>
            <param name="dt"></param>
        </member>
        <member name="M:FlexCore.Util.DataSetHelper.DeleteAllRows(System.Data.DataSet)">
            <summary>
            Elimina todas las filas de un DataSet, 
            invocando a <see cref="M:System.Data.DataRow.Delete"/> en cada una de ellas
            (no remueve las filas como el método Clear)
            </summary>
            <param name="dt"></param>
        </member>
        <member name="M:FlexCore.Util.DataSetHelper.DeleteAllRows``1(System.Data.TypedTableBase{``0},System.Func{``0,System.Boolean})">
            <summary>
            Elimina todas las filas de una tabla, 
            invocando a <see cref="M:System.Data.DataRow.Delete"/> en cada una de ellas
            (no remueve las filas como el método Clear)
            </summary>
            <typeparam name="T">a DataRow type</typeparam>
            <param name="filter"></param>
            <param name="dt"></param>
        </member>
        <member name="T:FlexCore.Util.StringHelper">
            <summary>
            Esta clase contiene metodos adicionales para el manejo de strings
            </summary>
        </member>
        <member name="M:FlexCore.Util.StringHelper.IsNullOrSpaces(System.String)">
            <summary>
            Retorna true si el string es nulo, vacio o compuesto solo por espacios/CR/etc (realiza un Trim)
            </summary>
        </member>
        <member name="M:FlexCore.Util.StringHelper.TrimOrNull(System.String)">
            <summary>
            Retorna null si el string es nulo, vacio o compuesto solo por espacios/CR/etc 
            En caso contrario retorna el string removiendo los espacios al final (TrimEnd)
            </summary>
        </member>
        <member name="M:FlexCore.Util.StringHelper.TryParse``1(System.String,``0@)">
            <summary>
            Intenta la conversión al tipo especificado, en caso afirmativo la asigna en el param. value y retorna true
            Si el texto es nulo o no es convertible, retorna false y asigna en value:
            nulo (si es un tipo por referencia) 
            o bien el valor default para ese tipo (ej. 0 para un int) si es un tipo por valor
            </summary>
            <remarks>
            Si el tipo especificado no es string, supone que el mismo tiene un método TryParse()
            </remarks>
        </member>
        <member name="T:FlexCore.Util.StringConfig">
            <summary>
            Esta clase contiene los métodos de encriptación para poder 
            guardar datos de usuario y clave en la configuracion, entre otros usos
            </summary>
        </member>
    </members>
</doc>
