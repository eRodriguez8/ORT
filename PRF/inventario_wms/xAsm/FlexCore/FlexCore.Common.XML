<?xml version="1.0"?>
<doc>
    <assembly>
        <name>FlexCore.Common</name>
    </assembly>
    <members>
        <member name="T:FlexCore.Common.CrudController`2">
            <summary>
            Clase base de los controladores para operaciones CRUD (Create, Read, Update, Delete)
            </summary>
            <remarks>Esta clase templatizada se redefine para cada entidad con los metodos particulares de acceso a su componente de negocio o servicio.</remarks>
            <typeparam name="K">Tipo de la clave, puede ser una clase o estructura</typeparam>
            <typeparam name="E">Tipo de la entidad</typeparam>
        </member>
        <member name="T:FlexCore.Common.ICrudController">
            <summary>
            Interfaz genérica, no templatizada, usada para pasaje de objetos CrudController como parámetro en componentes genéricos.
            </summary>
        </member>
        <member name="M:FlexCore.Common.ICrudController.BuildNewEntity(System.Object)">
            <summary>
            Construye una nueva entidad vacía
            </summary>
            <param name="parameter">Parámetro auxiliar opcional, ej. tipo de entidad</param>
        </member>
        <member name="M:FlexCore.Common.ICrudController.CreateEntity">
            <summary>
            Inserta una entidad en la base de datos
            </summary>
        </member>
        <member name="M:FlexCore.Common.ICrudController.ReadEntity(System.Object)">
            <summary>
            Lee los datos de una entidad
            </summary>
        </member>
        <member name="M:FlexCore.Common.ICrudController.UpdateEntity">
            <summary>
            Actualiza una entidad
            </summary>
        </member>
        <member name="M:FlexCore.Common.ICrudController.DeleteEntity">
            <summary>
            Elimina una entidad
            </summary>
        </member>
        <member name="M:FlexCore.Common.ICrudController.EntityHasChanges">
            <summary>
            Detecta si la entidad tiene cambios sin guardar
            </summary>
            <returns></returns>
        </member>
        <member name="M:FlexCore.Common.ICrudController.ParseEntityKey(System.Object)">
            <summary>
            Comprueba el tipo de la clave y/o convierte de string al tipo correcto
            </summary>
        </member>
        <member name="M:FlexCore.Common.ICrudController.SetCurrentEntity(System.Object,System.Object)">
            <summary>
            Reasigna la entidad y clave actuales
            </summary>
            <param name="id">Clave a asignar</param>
            <param name="entity">Entidad a asignar</param>
        </member>
        <member name="M:FlexCore.Common.ICrudController.LoadEntityState(System.Object,System.Object,FlexCore.Common.EntityStateSerializationType,System.Object@,System.Object@)">
            <summary>
            Rehidrata una entidad a partir de su estado serializado
            </summary>
            <param name="state"></param>
            <param name="id"></param>
            <param name="serializationType"></param>
        </member>
        <member name="P:FlexCore.Common.ICrudController.CurrentEntity">
            <summary>
            Obtiene la entidad actual
            </summary>
        </member>
        <member name="P:FlexCore.Common.ICrudController.CurrentId">
            <summary>
            Obtiene la clave actual
            </summary>
        </member>
        <member name="F:FlexCore.Common.CrudController`2.Id">
            <summary>
            Id de la entidad
            </summary>
        </member>
        <member name="F:FlexCore.Common.CrudController`2.Entity">
            <summary>
            Datos de la entidad actual
            </summary>
        </member>
        <member name="M:FlexCore.Common.CrudController`2.Create(`1)">
            <summary>
            Insertar una nueva entidad
            </summary>
        </member>
        <member name="M:FlexCore.Common.CrudController`2.Read(`0)">
            <summary>
            Leer una entidad existente
            </summary>
        </member>
        <member name="M:FlexCore.Common.CrudController`2.Update(`1)">
            <summary>
            Actualizar una entidad
            </summary>
        </member>
        <member name="M:FlexCore.Common.CrudController`2.Delete(`1)">
            <summary>
            Eliminar una entidad
            </summary>
        </member>
        <member name="M:FlexCore.Common.CrudController`2.BuildNew(System.Object)">
            <summary>
            Inicializar una entidad nueva, vacía
            </summary>
        </member>
        <member name="M:FlexCore.Common.CrudController`2.HasChanges(`1)">
            <summary>
            Detectar si hay cambios sin guardar en la enidad actual
            </summary>
        </member>
        <member name="M:FlexCore.Common.CrudController`2.ParseKey(System.Object)">
            <summary>
            Comprobar el tipo de la clave o convertir de string al tipo correcto
            </summary>
        </member>
        <member name="M:FlexCore.Common.CrudController`2.SetCurrentEntity(System.Object,System.Object)">
            <summary>
            Reasignar la entidad y clave actuales
            </summary>
            <remarks>
            Se puede utilizar, por ej. al recuperar la informacion serializada en un postback
            </remarks>
        </member>
        <member name="M:FlexCore.Common.CrudController`2.LoadEntityState(System.Object,System.Object,FlexCore.Common.EntityStateSerializationType,System.Object@,System.Object@)">
            <summary>
            Recuperar la entidad a partir de su estado serializado.
            </summary>
        </member>
        <member name="T:FlexCore.Common.EntityStateSerializationType">
            <summary>
            Indicates the serialization performed to the entity state
            </summary>
        </member>
        <member name="F:FlexCore.Common.EntityStateSerializationType.None">
            <summary>
            The entity is not serialized
            </summary>
        </member>
        <member name="F:FlexCore.Common.EntityStateSerializationType.DataSetXml">
            <summary>
            The entity is DataSet serialized as xml
            </summary>
        </member>
        <member name="F:FlexCore.Common.EntityStateSerializationType.DataContract">
            <summary>
            The entity is a DataContract serialized as xml
            </summary>
        </member>
        <member name="T:FlexCore.Common.LazyValueHolder`1">
            <summary>
            Holds a value that can be either in a loaded or unloaded state,
            the value can be set externally or by a provided function or lambda-expression,
            in this case, the value holder can update and notify changes based on dependency expresssions
            </summary>
            <typeparam name="TValue"></typeparam>
        </member>
        <member name="T:FlexCore.Common.ObserverValueHolder`1">
            <summary>
            Holds the return value of a function or lambda-expression,
            updating and notifying changes based on dependency expresssions
            </summary>
            <typeparam name="TValue"></typeparam>
        </member>
        <member name="M:FlexCore.Common.ObserverValueHolder`1.#ctor(System.Func{`0},FlexCore.Common.LambdaExpressionObserver2[])">
            <summary>
            Default Constructor
            </summary>
            <param name="parameter">Parameter for the getter expression (and dependency expressions)</param>
            <param name="valueGetter">Value getter function</param>
            <param name="dependencies">Dependency expressions</param>
        </member>
        <member name="P:FlexCore.Common.ObserverValueHolder`1.ReturnValueOnError">
            <summary>
            If true Exceptions on value getter are thrown, otherwise an specific value is return <seealso cref="P:FlexCore.Common.ObserverValueHolder`1.ValueOnError"/>.
            </summary>
        </member>
        <member name="P:FlexCore.Common.ObserverValueHolder`1.ValueOnError">
            <summary>
            Value to return when value getter function throws an Exception
            <seealso cref="P:FlexCore.Common.ObserverValueHolder`1.ReturnValueOnError"/>
            </summary>
        </member>
        <member name="M:FlexCore.Common.LazyValueHolder`1.#ctor(System.Func{`0},FlexCore.Common.LambdaExpressionObserver2[])">
            <summary>
            Creates a new LazyValueHolder with an specific getter
            </summary>
            <param name="valueGetter">function to obtain the value</param>
            <param name="dependencies">dependencies that cause the obtained value to need updating</param>
        </member>
        <member name="M:FlexCore.Common.LazyValueHolder`1.#ctor">
            <summary>
            Creates a new LazyValueHolder which Value property is set externally
            </summary>
        </member>
        <member name="T:FlexCore.Common.XmlSerializableNode">
            <summary>
            Base class for <see cref="T:System.Xml.XmlNode"/> wrappers for use in XML serialization.
            </summary>
            <remarks>
            Derived classes only support the 
            <see cref="M:System.Xml.XmlNode.WriteTo(System.Xml.XmlWriter)"/> and <see cref="M:System.Xml.XmlNode.WriteContentTo(System.Xml.XmlWriter)"/> 
            methods, as they are intended for use only for serialization, and to avoid 
            <see cref="T:System.Xml.XmlDocument"/> loading for fast performance. All other members 
            will throw an <see cref="T:System.NotSupportedException"/>.
            <para>Based on Daniel Cazzulino (kzu.net@gmail.com) SerializableNode class</para>
            See: http://weblogs.asp.net/cazzu/archive/2004/05/31/144922.aspx and 
            http://weblogs.asp.net/cazzu/posts/XmlMessagePerformance.aspx.
            </remarks>
        </member>
        <member name="T:FlexCore.Common.ProgressStep">
            <summary>
            Clase que representa a un paso del procesamiento.
            Estos pasos deben iniciarse y terminarse (normalmente dentro de un using)
            y pueden anidarse unos en otros
            Ver tambien <seealso cref="!:ProgressMediator"/>
            </summary>
        </member>
        <member name="M:FlexCore.Common.ProgressStep.#ctor(FlexCore.Common.ProgressPublisher,System.String)">
            <summary>
            Constructor público: recibe referencia a un "mediador" a quien debe comunicar cada cambio.
            El mediador es quien expone los eventos a los observadores
            </summary>
            <param name="mediator"></param>
            <param name="text"></param>
        </member>
        <member name="M:FlexCore.Common.ProgressStep.End(System.Int32,System.String,System.Nullable{System.Int64})">
            <summary>
            Fin controlado del paso
            </summary>
            <param name="resultCode"></param>
            <param name="resultText"></param>
            <param name="itemCount"></param>
        </member>
        <member name="M:FlexCore.Common.ProgressStep.Dispose">
            <summary>
            Dispose del objeto: detecta si se libera el paso sin haber invocado a End y lo hace.
            </summary>
        </member>
        <member name="P:FlexCore.Common.ProgressStep.StepLevel">
            <summary>
            Nivel de anidamiento: O para la tarea principal, y asi sucesivamente
            </summary>
        </member>
        <member name="P:FlexCore.Common.ProgressStep.Text">
            <summary>
            Texto del paso, ej. "Importación de datos"
            </summary>
        </member>
        <member name="P:FlexCore.Common.ProgressStep.ResultCode">
            <summary>
            Codigo de terminacion: 0 = Ok
            Solo está disponible una vez finalizado el paso
            </summary>
        </member>
        <member name="P:FlexCore.Common.ProgressStep.ResultText">
            <summary>
            Mensaje de error o de terminación Ok
            Solo está disponible una vez finalizado el paso
            </summary>
        </member>
        <member name="P:FlexCore.Common.ProgressStep.ItemCount">
            <summary>
            Cant. de items procesados, si aplica (else null)
            Solo está disponible una vez finalizado el paso
            </summary>
        </member>
        <member name="P:FlexCore.Common.ProgressStep.ElapsedTime">
            <summary>
            Tiempo transcurrido en la tarea
            Solo está disponible una vez finalizado el paso
            </summary>
        </member>
        <member name="T:FlexCore.Common.CustomXmlSerializer">
            <summary>
            Clase auxiliar que actua como wrapper para la serialización / deserialización XML de clases custom o datasets.
            </summary>
            <remarks>Se lo utiliza principalmente para el pasaje de parametros y retorno en las invocaciones a servicios mediante XML.</remarks>
        </member>
        <member name="T:FlexCore.Unity">
            <summary>
            Definición global de un UnityContainer (Enterprise Library) compartido entre capas de una misma aplicación física.
            </summary>
            <remarks>En el mismo se almacenan tipos y objetos inicializados (por ejemplo con definiciones obtenidas de configuración) para utilizar en mecanismos de IoC (Inversion of Control)</remarks>
        </member>
        <member name="M:FlexCore.Common.LambdaExpressionObserver`1.DecomposeGetter(System.Linq.Expressions.Expression{System.Func{`0,System.Object}},System.Linq.Expressions.Expression{System.Func{`0,System.Object}}@,System.Linq.Expressions.Expression{System.Func{System.Object,System.Object}}@,System.Reflection.MemberInfo@,System.Reflection.MethodInfo@)">
            <summary>
            Decompose a lambda expression, extracting last get (member access or method call) operation
            </summary>
            <param name="expression">a lambda expression</param>
            <param name="parentGetter">a get expression for the parent</param>
            <param name="getFromParent">a get to obtain the child from the parent</param>
            <param name="parentMember">member accessed to obtain the child (if last operation is a member access)</param>
            <param name="parentMethod">method call to obtain the child (if last operation is a method call)</param>
            <returns></returns>
        </member>
        <member name="F:FlexCore.Common.LambdaExpressionObserver`1.ExpressionNode.ChildMemberInfo">
            <summary>
            The member to access the child object
            </summary>
        </member>
        <member name="F:FlexCore.Common.LambdaExpressionObserver`1.ExpressionNode.ChildMethodInfo">
            <summary>
            The method that returns the child object
            </summary>
        </member>
        <member name="F:FlexCore.Common.LambdaExpressionObserver`1.ExpressionNode.ChildMemberEventInfo">
            <summary>
            The event raised when child object changes
            </summary>
        </member>
        <member name="M:FlexCore.Common.LambdaExpressionObserver`1.ExpressionNode.RefreshValue(System.Boolean)">
            <summary>
            Refresh current node value, updating child nodes if necessary
            </summary>
            <param name="forceHasChanged">if true, the current value has changed, no comparison is performed</param>
        </member>
        <member name="M:FlexCore.Common.LambdaExpressionObserver`1.ExpressionNode.RefreshValue(System.Boolean,System.EventArgs)">
            <summary>
            Refresh current node value, updating child nodes if necessary
            </summary>
            <param name="forceHasChanged">if true, the current value has changed, no comparison is performed</param>
            <param name="ea">if not null, the event args of the event that caused the refresh</param>
        </member>
        <member name="T:FlexCore.Common.ProgressPublisher">
            <summary>
            Clase intermediaria usada para reportar el avance y las etapas de un proceso.
            Implementa el "Mediator Design Pattern" funcionando como punto de contacto
            entre los procesos (que desarrollan tareas con etapas) y los "observadores" 
            (que deben ser notificados de su avance).
            </summary>
            <remarks>
            Los observadores se suscriben a eventos de esta clase.
            Ejemplos de observadores que pueden utilizarla son:
              - barras de status con indicadores de progreso (en una aplicacion Windows)
              - logs detallados de ejecucion (en cualquier aplicacion, incluyendo servicios Windows)
            Nótese que el valor de progreso y la etapa actual son totalmente independientes entre sí,
            y tambien lo son los eventos que reportan los cambios en uno y otra.
            </remarks>
        </member>
        <member name="F:FlexCore.Common.ProgressPublisher.maxValue">
            <summary>
            Valor máximo para la escala de progreso
            </summary>
        </member>
        <member name="F:FlexCore.Common.ProgressPublisher.currentValue">
            <summary>
            Valor actual de progreso
            </summary>
        </member>
        <member name="M:FlexCore.Common.ProgressPublisher.#ctor">
            <summary>
            Constructor público
            </summary>
        </member>
        <member name="M:FlexCore.Common.ProgressPublisher.#ctor(System.Int32)">
            <summary>
            Constructor público
            </summary>
            <param name="maxValue">Valor máximo posible de progreso, para dimensionar la escala</param>
        </member>
        <member name="M:FlexCore.Common.ProgressPublisher.SetMaxValue(System.Int32)">
            <summary>
            Establecer el valor máximo
            </summary>
            <param name="maxValue">Valor máximo posible de progreso, para dimensionar la escala</param>
        </member>
        <member name="M:FlexCore.Common.ProgressPublisher.SetValue(System.Int32)">
            <summary>
            Asignar un valor (absoluto) al indicador de progreso
            </summary>
            <param name="newValue"></param>
        </member>
        <member name="M:FlexCore.Common.ProgressPublisher.AddValue(System.Int32)">
            <summary>
            Incrementar el indicador de progreso en la cantidad especificada
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:FlexCore.Common.ProgressPublisher.StartStep(FlexCore.Common.ProgressStep)">
            <summary>
            Iniciar un nuevo paso
            </summary>
            <param name="step"></param>
        </member>
        <member name="M:FlexCore.Common.ProgressPublisher.CompleteStep(FlexCore.Common.ProgressStep,FlexCore.Common.ProgressStep)">
            <summary>
            Completar el paso actual
            </summary>
            <param name="step"></param>
            <param name="parentStep"></param>
        </member>
        <member name="P:FlexCore.Common.ProgressPublisher.CurrentStep">
            <summary>
            Paso actual
            </summary>
        </member>
        <member name="E:FlexCore.Common.ProgressPublisher.ProgressValueChanged">
            <summary>
            Evento: cambio en el valor de progreso
            </summary>
        </member>
        <member name="E:FlexCore.Common.ProgressPublisher.ProgressStepStarted">
            <summary>
            Evento: inicio de un nuevo paso
            Los atributos del paso se acceden a traves de propiedades de e.Step
            </summary>
        </member>
        <member name="E:FlexCore.Common.ProgressPublisher.ProgressStepCompleted">
            <summary>
            Evento: fin de un paso
            Los atributos del paso se acceden a traves de propiedades de e.Step
            </summary>
        </member>
        <member name="T:FlexCore.Common.ProgressValueChangedEventArgs">
            <summary>
            EventArguments para eventos de "value changed"
            </summary>
        </member>
        <member name="T:FlexCore.Common.ProgressStepChangedEventArgs">
            <summary>
            EventArguments para eventos de "step started" y "step completed"
            </summary>
        </member>
        <member name="T:FlexCore.Common.IProgressListener">
            <summary>
            Interfaz para objetos que observan el Progreso de un Proceso
            </summary>
        </member>
        <member name="M:FlexCore.Common.IProgressListener.Start">
            <summary>
            Se invoca al comenzar un proceso
            </summary>
        </member>
        <member name="M:FlexCore.Common.IProgressListener.SetMaximum(System.Int32)">
            <summary>
            Establece el valor del progreso, para el cual el proceso estará terminado
            </summary>
            <param name="max"></param>
        </member>
        <member name="M:FlexCore.Common.IProgressListener.SetMinimum(System.Int32)">
            <summary>
            Establece el valor del progreso, en el cual el proceso comienza
            </summary>
            <param name="min"></param>
        </member>
        <member name="M:FlexCore.Common.IProgressListener.SetValue(System.Int32)">
            <summary>
            Establece el valor de Progreso actual, si se encuentra fuera del rango
            [maximo, minimo] <see cref="M:FlexCore.Common.IProgressListener.SetMaximum(System.Int32)"/>, <see cref="M:FlexCore.Common.IProgressListener.SetMinimum(System.Int32)"/>,
            indica que el valor de Progreso es desconocido
            (pero el proceso aún se esta realizando)
            </summary>
            <param name="val"></param>
        </member>
        <member name="M:FlexCore.Common.IProgressListener.Finish">
            <summary>
            Se invoca al finalizar un proceso
            </summary>
        </member>
        <member name="M:FlexCore.Common.IProgressListener.SetMessage(System.String)">
            <summary>
            Establece un mensaje descriptivo sobre el estado actual del proceso
            </summary>
            <param name="message"></param>
        </member>
        <member name="F:FlexCore.Common.LambdaExpressionObserver2.ExpressionNode.MemberInfo">
            <summary>
            The member to access the child object
            </summary>
        </member>
        <member name="F:FlexCore.Common.LambdaExpressionObserver2.ExpressionNode.MethodInfo">
            <summary>
            The method that returns the child object
            </summary>
        </member>
        <member name="F:FlexCore.Common.LambdaExpressionObserver2.ExpressionNode.MemberChangedEventInfo">
            <summary>
            The event raised when child object changes
            </summary>
        </member>
        <member name="M:FlexCore.Common.LambdaExpressionObserver2.ExpressionNode.UpdateValue(System.Boolean,System.EventArgs)">
            <summary>
            Refresh current node value, updating parent node if necessary
            </summary>
            <param name="forceHasChanged">if true, the current value has changed, no comparison is performed</param>
            <param name="ea">if not null, the event args of the event that caused the refresh</param>
        </member>
        <member name="M:FlexCore.Common.LambdaExpressionObserver2.ExpressionNode.UpdateValue(System.Boolean,System.EventArgs,System.Boolean,System.Boolean)">
            <summary>
            Refresh current node value, updating parent node if necessary
            </summary>
            <param name="forceHasChanged">if true, the current value has changed, no comparison is performed</param>
            <param name="ea">if not null, the event args of the event that caused the refresh</param>
            <param name="notifyChanges">if true, changes are notified to the Observer</param>
            <param name="propagateChanges">if true, changes are propagated to parent node</param>
        </member>
    </members>
</doc>
