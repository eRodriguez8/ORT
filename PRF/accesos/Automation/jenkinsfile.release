//Jenkinsfile (Scripted Pipeline)

node {
	def SqlCmd = "\"C:\\Program Files\\Microsoft SQL Server\\110\\Tools\\Binn\\SQLCMD.EXE\""

	def APP_NAME = "Sua.Accesos.Api"

	def SVNEntrega = 'https://subversion.cencosud.corp/svn/CENCOSUD/CORPORATIVO_CENCOSUD/ARGENTINA/Centros_de_Distribucion_ARG/Aplicacion_Federativa-(APF)/2.Mantenciones/1.Jenkins/Accesos/Version '
	def SVNInstalables = "/Instalables/" 
	int idxAmbiente = (params.AMBIENTE == "desa") ? 0 : (params.AMBIENTE == "ide") ? 1 : (params.AMBIENTE == "prod") ? 2 : 3
	def DBScriptPath ='Scripts\\CAMBIOS\\'

	String[][] ApiServers = [
    ["\\\\G100603Sv216\\Accesos\\Api\\"],
    ["\\\\g100603svbkm\\Sites\\Accesos\\AccesosApi\\"]
  ]

	String[][] WebSiteServers = [
    ["\\\\G100603Sv216\\Accesos\\Web\\"],
    ["\\\\g100603svbkm\\Sites\\Accesos\\Web\\"]
  ]

	String[][] DataBaseServers = [
    ["G100603Sv216"],
	["g100603svbkm"]
  ]
  
  	String[][] ApiServersUrl = [
    ["http://G100603Sv216/SuaApi.Accesos/version.txt"],
    ["http://g100603svbkm/SuaApi.Accesos/version.txt"]
  ]
	  				

	String[][] WebSiteServerUrl = [
    ["http://G100603Sv216/Accesos/version.txt"],
    ["http://g100603svbkm/Accesos/version.txt"]
  ]
  
  	properties([parameters([string(defaultValue: '3.17.1.0', description: 'Nro de version a instalar', name: 'VERSION'),
		choice(choices: 'desa\nide\nprdo', description: 'En que ambiente?', name: 'AMBIENTE'),
		booleanParam(defaultValue: true, description: 'Instalar Api', name: 'API'),
		booleanParam(defaultValue: true, description: 'Instalar WebSite', name: 'WEBSITE'),]),
		pipelineTriggers([]), disableConcurrentBuilds()
	])


	
	stage('Checkout') {
		def SVNPath = "${SVNEntrega}${params.VERSION}${SVNInstalables}"
		checkout([$class: 'SubversionSCM', additionalCredentials: [[credentialsId: '1', realm: '<https://subversion.cencosud.corp:443> VisualSVN Server']], excludedCommitMessages: '', excludedRegions: '', excludedRevprop: '', excludedUsers: '', filterChangelog: false, ignoreDirPropChanges: false, includedRegions: '', locations: [[credentialsId: '1', depthOption: 'infinity', ignoreExternalsOption: false, local: '.', remote: SVNPath ]], workspaceUpdater: [$class: 'UpdateUpdater']])
	}
	
	stage('Deploying') {
		if(params.AMBIENTE != "prod")
		{
			parallel website: {
				if (params.WEBSITE) {
					for ( int i = 0; i < WebSiteServers[idxAmbiente].size(); i++ ) {
						copyVersionServer('Componentes\\Sua.Accesos.Api\\accesosApp', WebSiteServers[idxAmbiente][i])
					}
				}
			},
			API: {
				if (params.API) {
					for ( int i = 0; i < ApiServers[idxAmbiente].size(); i++ ) {
						copyVersionServer('Componentes\\Accesos_SUA', ApiServers[idxAmbiente][i])
					}
				}
			}
		}
	}	
	
	
}

def checkVersionServer(server, version) {
	powershell """\$VersionServer = (Invoke-WebRequest -UseBasicParsing -Uri \"${server}\").Content
		echo \$VersionServer
		if (\$VersionServer -eq \"${version}\") { Exit 0 } else { Exit 1} """
}

def copyVersionServer(source, dest) {
	bat "XCOPY \"${source}\" \"${dest}\" /s /e /i /Y"
}